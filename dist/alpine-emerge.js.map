{
  "version": 3,
  "sources": ["../src/index.js", "../builds/browser.js"],
  "sourcesContent": ["export default function (Alpine) {\n  // The directive\n  Alpine.directive('emerge', async (el, { value, expression }, { effect, evaluateLater }) => {\n    // Sink...\n    if (!_D) {\n      return\n    }\n\n    const root = el.content.firstElementChild\n    const cid = root.getAttribute('emerge-cid')\n    const extra = root.getAttribute('emerge-extra')\n\n    // Lazy load component when the if-statement\n    // expression evaluates to a truthy value or\n    // the for-statement has at least one loop.\n    if (cid && value === 'if') {\n      const evaluator = evaluateLater(expression)\n\n      // Evaluate `if`\n      effect(() => {\n        evaluator((evaluated) => {\n          if (evaluated) {\n            resolve()\n          }\n        })\n      })\n    } else if (cid && value === 'for') {\n      const items = parseForExpression(expression).items\n      const evaluator = evaluateLater(items)\n\n      // Evaluate `for`\n      effect(() => {\n        evaluator((evaluated) => {\n          if (\n            (typeof evaluated === 'number' && evaluated > 0) ||\n            (typeof evaluated === 'object' && evaluated.length > 0)\n          ) {\n            resolve()\n          }\n        })\n      })\n    } else {\n      resolve()\n    }\n\n    /**\n     * Emerge the component with Underscored and swap the `<template>`\n     * directives.\n     *\n     * @returns A promise when the component is emerged\n     */\n    async function resolve() {\n      if (cid) {\n        await _D.emerge(cid, root, extra ? JSON.parse(extra) : undefined)\n      }\n\n      el.removeAttribute(`x-emerge:${value}`)\n      setTimeout(() => el.setAttribute(`x-${value}`, expression))\n    }\n  })\n\n  /**\n   * Parse an expression of a for-statement.\n   * This was taken from VueJS 2.* core. Thanks Vue!\n   *\n   * @param {string} expression The for-expression\n   * @returns {object} An Alpine `for` object\n   */\n  function parseForExpression(expression) {\n    let forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/\n    let stripParensRE = /^\\s*\\(|\\)\\s*$/g\n    let forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/\n    let inMatch = expression.match(forAliasRE)\n\n    if (!inMatch) return\n\n    let res = {}\n    res.items = inMatch[2].trim()\n    let item = inMatch[1].replace(stripParensRE, '').trim()\n    let iteratorMatch = item.match(forIteratorRE)\n\n    if (iteratorMatch) {\n      res.item = item.replace(forIteratorRE, '').trim()\n      res.index = iteratorMatch[1].trim()\n\n      if (iteratorMatch[2]) {\n        res.collection = iteratorMatch[2].trim()\n      }\n    } else {\n      res.item = item\n    }\n\n    return res\n  }\n}\n", "import emerge from '../src/index.js'\n\ndocument.addEventListener('alpine:init', () => window.Alpine.plugin(emerge))\n"],
  "mappings": ";;AAAe,uBAAU,QAAQ;AAE/B,WAAO,UAAU,UAAU,OAAO,IAAI,EAAE,OAAO,cAAc,EAAE,QAAQ,oBAAoB;AAEzF,UAAI,CAAC,IAAI;AACP;AAAA,MACF;AAEA,YAAM,OAAO,GAAG,QAAQ;AACxB,YAAM,MAAM,KAAK,aAAa,YAAY;AAC1C,YAAM,QAAQ,KAAK,aAAa,cAAc;AAK9C,UAAI,OAAO,UAAU,MAAM;AACzB,cAAM,YAAY,cAAc,UAAU;AAG1C,eAAO,MAAM;AACX,oBAAU,CAAC,cAAc;AACvB,gBAAI,WAAW;AACb,sBAAQ;AAAA,YACV;AAAA,UACF,CAAC;AAAA,QACH,CAAC;AAAA,MACH,WAAW,OAAO,UAAU,OAAO;AACjC,cAAM,QAAQ,mBAAmB,UAAU,EAAE;AAC7C,cAAM,YAAY,cAAc,KAAK;AAGrC,eAAO,MAAM;AACX,oBAAU,CAAC,cAAc;AACvB,gBACG,OAAO,cAAc,YAAY,YAAY,KAC7C,OAAO,cAAc,YAAY,UAAU,SAAS,GACrD;AACA,sBAAQ;AAAA,YACV;AAAA,UACF,CAAC;AAAA,QACH,CAAC;AAAA,MACH,OAAO;AACL,gBAAQ;AAAA,MACV;AAQA,+BAAyB;AACvB,YAAI,KAAK;AACP,gBAAM,GAAG,OAAO,KAAK,MAAM,QAAQ,KAAK,MAAM,KAAK,IAAI,MAAS;AAAA,QAClE;AAEA,WAAG,gBAAgB,YAAY,OAAO;AACtC,mBAAW,MAAM,GAAG,aAAa,KAAK,SAAS,UAAU,CAAC;AAAA,MAC5D;AAAA,IACF,CAAC;AASD,gCAA4B,YAAY;AACtC,UAAI,gBAAgB;AACpB,UAAI,gBAAgB;AACpB,UAAI,aAAa;AACjB,UAAI,UAAU,WAAW,MAAM,UAAU;AAEzC,UAAI,CAAC;AAAS;AAEd,UAAI,MAAM,CAAC;AACX,UAAI,QAAQ,QAAQ,GAAG,KAAK;AAC5B,UAAI,OAAO,QAAQ,GAAG,QAAQ,eAAe,EAAE,EAAE,KAAK;AACtD,UAAI,gBAAgB,KAAK,MAAM,aAAa;AAE5C,UAAI,eAAe;AACjB,YAAI,OAAO,KAAK,QAAQ,eAAe,EAAE,EAAE,KAAK;AAChD,YAAI,QAAQ,cAAc,GAAG,KAAK;AAElC,YAAI,cAAc,IAAI;AACpB,cAAI,aAAa,cAAc,GAAG,KAAK;AAAA,QACzC;AAAA,MACF,OAAO;AACL,YAAI,OAAO;AAAA,MACb;AAEA,aAAO;AAAA,IACT;AAAA,EACF;;;AC5FA,WAAS,iBAAiB,eAAe,MAAM,OAAO,OAAO,OAAO,WAAM,CAAC;",
  "names": []
}
